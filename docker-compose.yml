services:
  database_initializer:
    image: python:3.12-slim
    volumes:
      - persistent-storage:/persistent
      - ./database_setup.py:/app/database_setup.py
    working_dir: /app
    command: ["python", "database_setup.py"]
    networks:
      - cyber_network
    deploy:
      restart_policy:
        condition: none

  vulnerable-site:
    build: ./vulnerable-site
    ports:
      - "5000:5000"
    environment:
      - DASHBOARD_URL=http://dashboard:5001/report-attack
    depends_on:
      - dashboard
      - database_initializer
    networks:
      - cyber_network
    volumes:
      - persistent-storage:/persistent
    container_name: vulnerable-site

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      - database_initializer
    networks:
      - cyber_network
    volumes:
      - persistent-storage:/persistent

  packet-capture:
    build: ./packet_capture
    networks:
      - cyber_network
    environment:
      - CAPTURE_INTERFACE=eth0 
      - VULNERABLE_SITE_IP=vulnerable-site 
    volumes:
      - persistent-storage:/persistent
    cap_add:
      - NET_ADMIN
      - NET_RAW

  status-checker:
    build: ./status_checker
    depends_on:
      - database_initializer
    networks:
      - cyber_network
    volumes:
      - persistent-storage:/persistent

  ddos-attacker:
    build:
      context: ./ddos-attacker
    networks:
      - cyber_network
    depends_on:
      - vulnerable-site
    cap_add:
      - NET_ADMIN  # Grants necessary permissions for packet flooding

networks:
  cyber_network:
    driver: bridge

volumes:
  persistent-storage:
    driver: local
